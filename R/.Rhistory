install.packages("corrplot")
install.packages("RColorBrewer")
library(corrplot)
library(RColorBrewer)
data <- read.csv("C:\\Users\\Pui Pui\\Desktop\\maastricht\\maastricht\\GermanCredit.csv", sep = ";", header=TRUE)
subset <- data[,2:20]
data_matrix <- data.matrix(subset)
corr_matrix <- cor(data_matrix, use="complete.obs", method="kendall")
head(round(corr_matrix,2))
corrplot(corr_matrix, type="upper", order="hclust", sig.level=0.01)
cor_subdata=cor(subdata, use="complete.obs")
cor_subset=cor(subset, use="complete.obs")
corrplot(cor_subset, order "AOE", method="square", tl.pos"lt", type="upper",)
install.packages("corrplot")
install.packages("RColorBrewer")
library(corrplot)
library(RColorBrewer)
p.mat = 1-abs(cor_subset),sig.level=0.50,insig="blank")
corrplot(cor_subset, order="AOE", method="square", tl.pos="lt", type="upper",
tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank")
subset <- data[,2:32]
cor_subset=cor(subset, use="complete.obs")
corrplot(cor_subset, order="AOE", method="square", tl.pos="lt", type="upper",
tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank")
cor_subset
corrplot(cor_subset, order="AOE", method="square", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = FALSE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank")
corrplot(cor_subset, order="AOE", method="square", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank")
## Correlation matrix with p-values. See http://goo.gl/nahmV for documentation of this function
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
## Use this to dump the cor.prob output to a 4 column matrix
## with row/column indices, correlation, and p-value.
## See StackOverflow question: http://goo.gl/fCUcQ
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
# get some data from the mtcars built-in dataset
mydata <- mtcars[, c(1,3,4,5,6)]
# correlation matrix
cor(mydata)
# correlation matrix with p-values
cor.prob(mydata)
# "flatten" that table
flattenSquareMatrix(cor.prob(mydata))
# plot the data
library(PerformanceAnalytics)
chart.Correlation(mydata)
install.packages("PerformanceAnalytics")
## Correlation matrix with p-values. See http://goo.gl/nahmV for documentation of this function
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
## Use this to dump the cor.prob output to a 4 column matrix
## with row/column indices, correlation, and p-value.
## See StackOverflow question: http://goo.gl/fCUcQ
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
# get some data from the mtcars built-in dataset
mydata <- mtcars[, c(1,3,4,5,6)]
# correlation matrix
cor(mydata)
# correlation matrix with p-values
cor.prob(mydata)
# "flatten" that table
flattenSquareMatrix(cor.prob(mydata))
# plot the data
library(PerformanceAnalytics)
chart.Correlation(mydata)
corrplot(cor_subset, order="AOE", method="square", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank")
## Correlation matrix with p-values. See http://goo.gl/nahmV for documentation of this function
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
## Use this to dump the cor.prob output to a 4 column matrix
## with row/column indices, correlation, and p-value.
## See StackOverflow question: http://goo.gl/fCUcQ
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
# get some data from the mtcars built-in dataset
mydata <- mtcars[, c(1,3,4,5,6)]
# correlation matrix
cor(mydata)
# correlation matrix with p-values
cor.prob(mydata)
# "flatten" that table
flattenSquareMatrix(cor.prob(mydata))
# plot the data
library(PerformanceAnalytics)
chart.Correlation(mydata)
## Correlation matrix with p-values. See http://goo.gl/nahmV for documentation of this function
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
## Use this to dump the cor.prob output to a 4 column matrix
## with row/column indices, correlation, and p-value.
## See StackOverflow question: http://goo.gl/fCUcQ
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
# get some data from the mtcars built-in dataset
#mydata <- mtcars[, c(1,3,4,5,6)]
# correlation matrix
cor(subset)
# correlation matrix with p-values
cor.prob(subset)
# "flatten" that table
flattenSquareMatrix(cor.prob(subset))
# plot the data
library(PerformanceAnalytics)
chart.Correlation(subset)
cor.prob(subset)
install.packages("corrplot")
install.packages("RColorBrewer")
install.packages("PerformanceAnalytics")
library(corrplot)
library(RColorBrewer)
data <- read.csv("C:\\Users\\Pui Pui\\Desktop\\maastricht\\maastricht\\GermanCredit.csv", sep = ";", header=TRUE)
subset <- data[,2:32]
data_matrix <- data.matrix(subset)
corr_matrix <- cor(data_matrix, use="complete.obs", method="kendall")
head(round(corr_matrix,2))
corrplot(corr_matrix, type="upper", order="hclust", sig.level=0.01)
#create data with some correlation structure
##subset
#create corrleation matrix
cor_subset=cor(subset, use="complete.obs")
cor_subset
#plot cor matrix
##squares, variables as %
corrplot(cor_subset, order="AOE", method="square", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank")
SBEblue=rgb(1/255, 19/255, 62/255,1)
SBEorange=rgb(239/255, 93/255, 38/255,1)
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank", addshade = c("negative", "positive", "all"),)
addshade = c("SBEblue", "SBEorange", "all"),)
corrplot(cor_subset, order="AOE", method="square", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank",
addshade = c("SBEblue", "SBEorange", "all"),)
corrplot(cor_subset, order="AOE", method="square", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank",
addshade = c("SBEblue", "Green", "all"),)
corrplot(cor_subset, order="AOE", method="shade", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank",
addshade = c("SBEblue", "Green", "all"),)
corrplot(cor_subset, order="AOE", method="shade", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank",
addshade = c("SBEblue", "Green", "all"))
corrplot(cor_subset, order="AOE", method="shade", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank",
addshade = c("SBEblue", "Green", "all"),   shade.lwd = 1, shade.col = "white",)
corrplot(cor_subset, order="AOE", method="shade", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank",
addshade = c("SBEblue", "Green", "all"),   shade.lwd = 1, shade.col = "white")
corrplot(cor_subset, order="AOE", method="shade", tl.pos="lt",
type="upper", tl.col="black",tl.cex=0.6,tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
p.mat = 1-abs(cor_subset), sig.level=0.50,insig="blank",
addshade = c("SBEblue", "SBEorange", "all"),   shade.lwd = 1, shade.col = "white")
